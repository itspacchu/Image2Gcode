#ifndef IOSTREAM_H
#define IOSTREAM_H
#include<iostream>
#endif

#include <fstream>

class GCODE_Generator{
    private:
        std::string GCODE_GENERATED;
        std::string GCODE_HEADER;
        std::string GCODE_FOOTER;
        std::string GENERATOR_CREDS = "; Generated by Image2Gcode\n; https://github.com/itspacchu/Image2Gcode\n; Author: Prashant\n";
        std::string GCODE_HEADER_START = "G28\nG28\n\nG90\n\nG0 Z20\n\nM117 Deploy Pen NOW! 10\n\nG4 P1000\n\nM117 Deploy Pen NOW! 9\n\nG4 P1000\n\nM117 Deploy Pen NOW! 8\n\nG4 P1000\n\nM117 Deploy Pen NOW! 7\n\nG4 P1000\n\nM117 Deploy Pen NOW! 6\n\nG4 P1000\n\nM117 Deploy Pen NOW! 5\n\nG4 P1000\n\nM117 Deploy Pen NOW! 4\n\nG4 P1000\n\nM117 Deploy Pen NOW! 3\n\nG4 P1000\n\nM117 Deploy Pen NOW! 2\n\nG4 P1000\n\nM117 Deploy Pen NOW! 1\n\nG4 P1000\n\nM117 Drawing.... Init\n'";
        std::string GCODE_FOOTER_START = "G0 Z20\n\nG28 X0 Y0\n\nM18\n";
    public:
        GCODE_Generator(){
            GCODE_GENERATED = GENERATOR_CREDS;
            GCODE_HEADER = "";
            GCODE_FOOTER = "";
        }

        // Saves GCODE file to given filepath
        void save_file(std::string filepath){
            std::ofstream myfile;
            myfile.open (filepath);
            myfile << GCODE_GENERATED;
            myfile.close();
            std::cout << "Saved to " << filepath << std::endl;
        }

        void set_header(std::string header){
            GCODE_HEADER = header;
        }

        // Set a predefined header
        void use_default_header(){
            GCODE_HEADER = GCODE_HEADER_START;
        }

        // Set a predefined footer which Autohomes M18
        void use_default_footer(){
            GCODE_FOOTER = GCODE_FOOTER_START;
        }

        // prints the gcode to the console
        void show_gcode(){
            std::cout << GCODE_GENERATED << std::endl;
        }

        
        void set_footer(std::string footer){
            GCODE_FOOTER = footer;
        }
        // G0 Linear move
        // https://marlinfw.org/docs/gcode/G000-G001.html
        void G0(float X=-1,float Y=-1,float Z=-1){
            if(X == -1 && Y == -1 && Z == -1) return;
            std::string G0_command = "G0 ";
            if(X != -1){
                G0_command += "X" + std::to_string(X) + " ";
            }
            if(Y != -1){
                G0_command += "Y" + std::to_string(Y) + " ";
            }
            if(Z != -1){
                G0_command += "Z" + std::to_string(Z) + " ";
            }
            GCODE_GENERATED += G0_command + "\n";
        }
        // G1 Linear move with high feedrate
        // https://marlinfw.org/docs/gcode/G000-G001.html
        void G1(float X=-1,float Y=-1,float Z=-1,float F=-1){
            if(X == -1 && Y == -1 && Z == -1 && F == -1){
                return;
            }
            std::string G0_command = "G1 ";
            if(X != -1){
                G0_command += "X" + std::to_string(X) + " ";
            }
            if(Y != -1){
                G0_command += "Y" + std::to_string(Y) + " ";
            }
            if(Z != -1){
                G0_command += "Z" + std::to_string(Z) + " ";
            }
            if(F != -1){
                G0_command += "F" + std::to_string(F) + " ";
            }
            GCODE_GENERATED += G0_command + "\n";
        }

        // G28 Auto Home
        // https://marlinfw.org/docs/gcode/G028.html
        void G28(){
            
            GCODE_GENERATED += "G28\n";
        }

        void add_comment(std::string comment){
            // Add Comment
            GCODE_GENERATED += "; " + comment + "\n";
        }

        // G92 Set Position
        // https://marlinfw.org/docs/gcode/G092.html
        void G92(float X=-1,float Y=-1,float Z=-1){
            if(X == -1 && Y == -1 && Z == -1){
                return;
            }
            std::string G0_command = "G1 ";
            if(X != -1){
                G0_command += "X" + std::to_string(X) + " ";
            }
            if(Y != -1){
                G0_command += "Y" + std::to_string(Y) + " ";
            }
            if(Z != -1){
                G0_command += "Z" + std::to_string(Z) + " ";
            }
            GCODE_GENERATED += G0_command + "\n";
        }
};